var tipuesearch = {"pages":[{"title":" iapws ","text":"iapws Introduction Dependencies Installation License Introduction ipaws is a  Fortran library providing the formulas for computing light and heavy water properties.\nThe formulas are taken from http://iapws.org. For now, I have implemented the technical report G7-04 for gas solubility. I plan to implement the \ntechnical report R7-97. To use iapws within your fpm <https://github.com/fortran-lang/fpm> _ project,\nadd the following to your fpm.toml file: .. code-block:: [dependencies] iapws = { git=\"https://github.com/MilanSkocic/iapws.git\" } Optional thin wrappers allow usage of the library from other languages, e.g.: C wrapper Python wrapper Dependencies gcc>=10.0\ngfortran>=10.0\nfpm>=0.7 Installation A Makefile is provided, which uses fpm , for building the library. On windows, msys2 needs to be installed. \n  Add the msys2 binary (usually C:\\msys64\\usr\\bin) to the path in order to be able to use make. On Darwin, the gcc toolchain needs to be installed. Build: the configuration file will set all the environment variables necessary for the compilation chmod +x configure.sh\n    . ./configure.sh\n    make Run tests make test Install make install Uninstall make uninstall License MIT Developer Info Milan Skocic","tags":"home","loc":"index.html"},{"title":"iapws_g704_gas_t – iapws ","text":"type, public :: iapws_g704_gas_t Derived type containing a allocatable string for representing a gas. Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: gas Gas","tags":"","loc":"type\\iapws_g704_gas_t.html"},{"title":"iapws_g704_gases – iapws","text":"public  function iapws_g704_gases(heavywater) result(gases) Returns the list of available gases. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). Return Value type( iapws_g704_gas_t ), pointer, (:) Available gases. Called by proc~~iapws_g704_gases~~CalledByGraph proc~iapws_g704_gases iapws_g704_gases proc~iapws_g704_capi_gases iapws_g704_capi_gases proc~iapws_g704_capi_gases->proc~iapws_g704_gases proc~iapws_g704_gases2 iapws_g704_gases2 proc~iapws_g704_gases2->proc~iapws_g704_gases Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_gases.html"},{"title":"iapws_g704_gases2 – iapws","text":"public  function iapws_g704_gases2(heavywater) result(gases) Returns the available gases as a string. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). Return Value character(len=:), pointer Available gases Calls proc~~iapws_g704_gases2~~CallsGraph proc~iapws_g704_gases2 iapws_g704_gases2 proc~iapws_g704_gases iapws_g704_gases proc~iapws_g704_gases2->proc~iapws_g704_gases Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_gases2.html"},{"title":"iapws_g704_ngases – iapws","text":"public pure function iapws_g704_ngases(heavywater) result(n) Returns the number of gases. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). Return Value integer(kind=int32) Number of gases. Called by proc~~iapws_g704_ngases~~CalledByGraph proc~iapws_g704_ngases iapws_g704_ngases proc~iapws_g704_capi_ngases iapws_g704_capi_ngases proc~iapws_g704_capi_ngases->proc~iapws_g704_ngases Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_ngases.html"},{"title":"iapws_g704_kd – iapws","text":"public pure subroutine iapws_g704_kd(T, gas, heavywater, k) Compute the vapor-liquid constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T (:) Temperature in °C. character(len=*), intent(in) :: gas Gas. integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=real64), intent(out) :: k (:) Vapor-liquid constant. Filled with NaNs if gas not found. Called by proc~~iapws_g704_kd~~CalledByGraph proc~iapws_g704_kd iapws_g704_kd proc~iapws_g704_capi_kd iapws_g704_capi_kd proc~iapws_g704_capi_kd->proc~iapws_g704_kd Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_kd.html"},{"title":"iapws_g704_kh – iapws","text":"public pure subroutine iapws_g704_kh(T, gas, heavywater, k) Compute the henry constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T (:) Temperature in °C. character(len=*), intent(in) :: gas Gas. integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=real64), intent(out) :: k (:) Henry constant. Filled with NaNs if gas not found. Called by proc~~iapws_g704_kh~~CalledByGraph proc~iapws_g704_kh iapws_g704_kh proc~iapws_g704_capi_kh iapws_g704_capi_kh proc~iapws_g704_capi_kh->proc~iapws_g704_kh Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_kh.html"},{"title":"iapws_g704_capi_gases – iapws","text":"public  function iapws_g704_capi_gases(heavywater) result(gases) bind(C)) Returns the list of available gases. Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). Return Value type(c_ptr) Available gases. Calls proc~~iapws_g704_capi_gases~~CallsGraph proc~iapws_g704_capi_gases iapws_g704_capi_gases proc~iapws_g704_gases iapws_g704_gases proc~iapws_g704_capi_gases->proc~iapws_g704_gases Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_capi_gases.html"},{"title":"iapws_g704_capi_ngases – iapws","text":"public pure function iapws_g704_capi_ngases(heavywater) result(n) bind(C)) Returns the number of gases. Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). Return Value integer(kind=c_int) Number of gases. Calls proc~~iapws_g704_capi_ngases~~CallsGraph proc~iapws_g704_capi_ngases iapws_g704_capi_ngases proc~iapws_g704_ngases iapws_g704_ngases proc~iapws_g704_capi_ngases->proc~iapws_g704_ngases Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_capi_ngases.html"},{"title":"iapws_g704_capi_kd – iapws","text":"public  subroutine iapws_g704_capi_kd(T, gas, heavywater, k, size_gas, size_T) bind(C) Compute the vapor-liquid constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: T (size_T) Temperature in °C. type(c_ptr), intent(in), value :: gas Gas. integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=c_double), intent(inout) :: k (size_T) Vapor-liquid constant. Filled with NaNs if gas not found. integer(kind=c_int), intent(in), value :: size_gas Size of the gas string. integer(kind=c_size_t), intent(in), value :: size_T Size of T and k. Calls proc~~iapws_g704_capi_kd~~CallsGraph proc~iapws_g704_capi_kd iapws_g704_capi_kd proc~iapws_g704_kd iapws_g704_kd proc~iapws_g704_capi_kd->proc~iapws_g704_kd Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_capi_kd.html"},{"title":"iapws_g704_capi_kh – iapws","text":"public  subroutine iapws_g704_capi_kh(T, gas, heavywater, k, size_gas, size_T) bind(C) Compute the henry constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: T (size_T) Temperature in °C. type(c_ptr), intent(in), value :: gas Gas. integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=c_double), intent(inout) :: k (size_T) Henry constant. Filled with NaNs if gas not found. integer(kind=c_int), intent(in), value :: size_gas Size of the gas string. integer(kind=c_size_t), intent(in), value :: size_T Size of T and k. Calls proc~~iapws_g704_capi_kh~~CallsGraph proc~iapws_g704_capi_kh iapws_g704_capi_kh proc~iapws_g704_kh iapws_g704_kh proc~iapws_g704_capi_kh->proc~iapws_g704_kh Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc\\iapws_g704_capi_kh.html"},{"title":"get_version – iapws","text":"public  function get_version() result(fptr) Get the version. \nReturns Arguments None Return Value character(len=:), pointer Pointer to the version string.","tags":"","loc":"proc\\get_version.html"},{"title":"iapws_r797_v – iapws","text":"public pure elemental function iapws_r797_v(P, T) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: P real(kind=real64), intent(in) :: T Return Value real(kind=real64)","tags":"","loc":"proc\\iapws_r797_v.html"},{"title":"iapws__g704 – iapws","text":"Module for IAPWS G7-04\nEFGH coefficients for gases in heavywater.\nai and bi coefficients for water Uses iapws__r283 ieee_arithmetic iso_fortran_env module~~iapws__g704~~UsesGraph module~iapws__g704 iapws__g704 ieee_arithmetic ieee_arithmetic module~iapws__g704->ieee_arithmetic iso_fortran_env iso_fortran_env module~iapws__g704->iso_fortran_env module~iapws__r283 iapws__r283 module~iapws__g704->module~iapws__r283 module~iapws__r283->iso_fortran_env iso_c_binding iso_c_binding module~iapws__r283->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~iapws__g704~~UsedByGraph module~iapws__g704 iapws__g704 module~iapws iapws module~iapws->module~iapws__g704 module~iapws__g704_capi iapws__g704_capi module~iapws->module~iapws__g704_capi module~iapws__g704_capi->module~iapws__g704 Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: iapws_g704_gas_t Derived type containing a allocatable string for representing a gas. Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: gas Gas Functions public  function iapws_g704_gases (heavywater) result(gases) Returns the list of available gases. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). Return Value type( iapws_g704_gas_t ), pointer, (:) Available gases. public  function iapws_g704_gases2 (heavywater) result(gases) Returns the available gases as a string. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). Return Value character(len=:), pointer Available gases public pure function iapws_g704_ngases (heavywater) result(n) Returns the number of gases. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). Return Value integer(kind=int32) Number of gases. Subroutines public pure subroutine iapws_g704_kd (T, gas, heavywater, k) Compute the vapor-liquid constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T (:) Temperature in °C. character(len=*), intent(in) :: gas Gas. integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=real64), intent(out) :: k (:) Vapor-liquid constant. Filled with NaNs if gas not found. public pure subroutine iapws_g704_kh (T, gas, heavywater, k) Compute the henry constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T (:) Temperature in °C. character(len=*), intent(in) :: gas Gas. integer(kind=int32), intent(in) :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=real64), intent(out) :: k (:) Henry constant. Filled with NaNs if gas not found.","tags":"","loc":"module\\iapws__g704.html"},{"title":"iapws__g704_capi – iapws","text":"C API for the G704 module. Uses iapws__g704 iso_c_binding iso_fortran_env module~~iapws__g704_capi~~UsesGraph module~iapws__g704_capi iapws__g704_capi iso_c_binding iso_c_binding module~iapws__g704_capi->iso_c_binding iso_fortran_env iso_fortran_env module~iapws__g704_capi->iso_fortran_env module~iapws__g704 iapws__g704 module~iapws__g704_capi->module~iapws__g704 module~iapws__g704->iso_fortran_env ieee_arithmetic ieee_arithmetic module~iapws__g704->ieee_arithmetic module~iapws__r283 iapws__r283 module~iapws__g704->module~iapws__r283 module~iapws__r283->iso_c_binding module~iapws__r283->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~iapws__g704_capi~~UsedByGraph module~iapws__g704_capi iapws__g704_capi module~iapws iapws module~iapws->module~iapws__g704_capi Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public  function iapws_g704_capi_gases (heavywater) result(gases) bind(C)) Returns the list of available gases. Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). Return Value type(c_ptr) Available gases. public pure function iapws_g704_capi_ngases (heavywater) result(n) bind(C)) Returns the number of gases. Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). Return Value integer(kind=c_int) Number of gases. Subroutines public  subroutine iapws_g704_capi_kd (T, gas, heavywater, k, size_gas, size_T) bind(C) Compute the vapor-liquid constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: T (size_T) Temperature in °C. type(c_ptr), intent(in), value :: gas Gas. integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=c_double), intent(inout) :: k (size_T) Vapor-liquid constant. Filled with NaNs if gas not found. integer(kind=c_int), intent(in), value :: size_gas Size of the gas string. integer(kind=c_size_t), intent(in), value :: size_T Size of T and k. public  subroutine iapws_g704_capi_kh (T, gas, heavywater, k, size_gas, size_T) bind(C) Compute the henry constant for a given temperature. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: T (size_T) Temperature in °C. type(c_ptr), intent(in), value :: gas Gas. integer(kind=c_int), intent(in), value :: heavywater Flag if D2O (1) is used or H2O(0). real(kind=c_double), intent(inout) :: k (size_T) Henry constant. Filled with NaNs if gas not found. integer(kind=c_int), intent(in), value :: size_gas Size of the gas string. integer(kind=c_size_t), intent(in), value :: size_T Size of T and k.","tags":"","loc":"module\\iapws__g704_capi.html"},{"title":"iapws__version – iapws","text":"Version Uses iso_c_binding iso_fortran_env module~~iapws__version~~UsesGraph module~iapws__version iapws__version iso_c_binding iso_c_binding module~iapws__version->iso_c_binding iso_fortran_env iso_fortran_env module~iapws__version->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~iapws__version~~UsedByGraph module~iapws__version iapws__version module~iapws iapws module~iapws->module~iapws__version Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public  function get_version () result(fptr) Get the version. \nReturns Arguments None Return Value character(len=:), pointer Pointer to the version string.","tags":"","loc":"module\\iapws__version.html"},{"title":"iapws – iapws","text":"Main module for the IAPWS library. Uses iapws__g704_capi iapws__version iapws__g704 iapws__r283 module~~iapws~~UsesGraph module~iapws iapws module~iapws__g704 iapws__g704 module~iapws->module~iapws__g704 module~iapws__g704_capi iapws__g704_capi module~iapws->module~iapws__g704_capi module~iapws__r283 iapws__r283 module~iapws->module~iapws__r283 module~iapws__version iapws__version module~iapws->module~iapws__version module~iapws__g704->module~iapws__r283 ieee_arithmetic ieee_arithmetic module~iapws__g704->ieee_arithmetic iso_fortran_env iso_fortran_env module~iapws__g704->iso_fortran_env module~iapws__g704_capi->module~iapws__g704 iso_c_binding iso_c_binding module~iapws__g704_capi->iso_c_binding module~iapws__g704_capi->iso_fortran_env module~iapws__r283->iso_c_binding module~iapws__r283->iso_fortran_env module~iapws__version->iso_c_binding module~iapws__version->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module\\iapws.html"},{"title":"iapws__r283 – iapws","text":"Module for IAPWS R283 Uses iso_c_binding iso_fortran_env module~~iapws__r283~~UsesGraph module~iapws__r283 iapws__r283 iso_c_binding iso_c_binding module~iapws__r283->iso_c_binding iso_fortran_env iso_fortran_env module~iapws__r283->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~iapws__r283~~UsedByGraph module~iapws__r283 iapws__r283 module~iapws iapws module~iapws->module~iapws__r283 module~iapws__g704 iapws__g704 module~iapws->module~iapws__g704 module~iapws__g704_capi iapws__g704_capi module~iapws->module~iapws__g704_capi module~iapws__g704->module~iapws__r283 module~iapws__g704_capi->module~iapws__g704 Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial real(kind=real64), public, parameter :: Tc_D2O = 643.847d0 Critical temperature for D2O in K real(kind=real64), public, parameter :: Tc_H2O = 647.096d0 Critical temperature for H2O in K real(kind=c_double), public, bind(C, name=\"0\") :: capi_Tc_D2O = Tc_D2O Critical temperature for D2O in K real(kind=c_double), public, bind(C, name=\"0\") :: capi_Tc_H2O = Tc_H2O Critical temperature for H2O in K real(kind=c_double), public, bind(C, name=\"0\") :: capi_pc_D2O = pc_D2O Critical pressure for D2O in MPa real(kind=c_double), public, bind(C, name=\"0\") :: capi_pc_H2O = pc_H2O Critical pressure for H2O in MPa real(kind=c_double), public, bind(C, name=\"0\") :: capi_rhoc_D2O = rhoc_D2O Critical density for D2O in kg.m-3 real(kind=c_double), public, bind(C, name=\"0\") :: capi_rhoc_H2O = rhoc_H2O Critical density for H2O in kg.m-3 real(kind=real64), public, parameter :: pc_D2O = 21.671d0 Critical pressure for H2O in MPa real(kind=real64), public, parameter :: pc_H2O = 22.064d0 Critical pressure for H2O in MPa real(kind=real64), public, parameter :: rhoc_D2O = 356.0d0 Critical density for H2O in kg.m-3 real(kind=real64), public, parameter :: rhoc_H2O = 322.0d0 Critical density for H2O in kg.m-3","tags":"","loc":"module\\iapws__r283.html"},{"title":"iapws__r797 – iapws","text":"Module for IAPWS R7-97\nParameters from IAPWS R7-97 Uses ieee_arithmetic iso_fortran_env module~~iapws__r797~~UsesGraph module~iapws__r797 iapws__r797 ieee_arithmetic ieee_arithmetic module~iapws__r797->ieee_arithmetic iso_fortran_env iso_fortran_env module~iapws__r797->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public pure elemental function iapws_r797_v (P, T) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: P real(kind=real64), intent(in) :: T Return Value real(kind=real64)","tags":"","loc":"module\\iapws__r797.html"},{"title":"iapws_g704.f90 – iapws","text":"This file depends on sourcefile~~iapws_g704.f90~~EfferentGraph sourcefile~iapws_g704.f90 iapws_g704.f90 sourcefile~iapws_r283.f90 iapws_r283.f90 sourcefile~iapws_g704.f90->sourcefile~iapws_r283.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~iapws_g704.f90~~AfferentGraph sourcefile~iapws_g704.f90 iapws_g704.f90 sourcefile~iapws.f90 iapws.f90 sourcefile~iapws.f90->sourcefile~iapws_g704.f90 sourcefile~iapws_g704_capi.f90 iapws_g704_capi.f90 sourcefile~iapws.f90->sourcefile~iapws_g704_capi.f90 sourcefile~iapws_g704_capi.f90->sourcefile~iapws_g704.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module iapws__g704 !! Module for IAPWS G7-04 use iso_fortran_env use ieee_arithmetic use iapws__r283 implicit none private integer ( int32 ), parameter :: lengas = 5 integer ( int32 ), parameter :: ngas_H2O = 14 integer ( int32 ), parameter :: ngas_D2O = 7 type :: iapws_g704_gas_t !! Derived type containing a allocatable string for representing a gas. character ( len = :), allocatable :: gas !! Gas end type type ( iapws_g704_gas_t ), allocatable , target :: f_gases (:) character ( len = :), allocatable , target :: f_gases_str real ( real64 ), parameter :: T_KELVIN = 27 3.15d0 !! Absolute temperature in KELVIN real ( real64 ), parameter :: Tc1_H2O = Tc_H2O real ( real64 ), parameter :: pc1_H2O = pc_H2O real ( real64 ), parameter :: Tc1_D2O = Tc_D2O real ( real64 ), parameter :: pc1_D2O = pc_D2O real ( real64 ), parameter :: q_H2O = - 0.023767d0 !! solvent coefficient for kd in water real ( real64 ), parameter :: q_D2O = - 0.024552d0 !! solvent coefficient for kd in heavywater !! ABC coefficients for gases in water. type :: abc_t character ( len = lengas ) :: gas !! Gas real ( real64 ) :: A !! A Column real ( real64 ) :: B !! B Column real ( real64 ) :: C !! C Column end type !! EFGH coefficients for gases in heavywater. type :: efgh_t character ( len = lengas ) :: gas !! Gas real ( real64 ) :: E !! E Column real ( real64 ) :: F !! F Column real ( real64 ) :: G !! G Column real ( real64 ) :: H !! H Column end type !! ai and bi coefficients for water real ( real64 ), dimension ( 6 , 2 ), parameter :: aibi_H2O = reshape ([& - 7.85951783d0 , 1.84408259d0 , - 1 1.78664970d0 , 2 2.68074110d0 , - 1 5.96187190d0 , 1.80122502d0 ,& 1.000d0 , 1.500d0 , 3.000d0 , 3.500d0 , 4.000d0 , 7.500d0 ], [ 6 , 2 ]) !! ai and bi coefficients for heavywater real ( real64 ), dimension ( 5 , 2 ), parameter :: aibi_D2O = reshape ([& - 7.8966570d0 , 2 4.7330800d0 , - 2 7.8112800d0 , 9.3559130d0 , - 9.2200830d0 , & 1.00d0 , 1.89d0 , 2.00d0 , 3.00d0 , 3.60d0 ], [ 5 , 2 ]) !! ABC constants water. type ( abc_t ), dimension ( ngas_H2O ), parameter :: abc_H2O = & [ abc_t ( \"He\" , - 3.52839d0 , 7.12983d0 , 4.47770d0 ),& abc_t ( \"Ne\" , - 3.18301d0 , 5.31448d0 , 5.43774d0 ),& abc_t ( \"Ar\" , - 8.40954d0 , 4.29587d0 , 1 0.52779d0 ),& abc_t ( \"Kr\" , - 8.97358d0 , 3.61508d0 , 1 1.29963d0 ),& abc_t ( \"Xe\" , - 1 4.21635d0 , 4.00041d0 , 1 5.60999d0 ),& abc_t ( \"H2\" , - 4.73284d0 , 6.08954d0 , 6.06066d0 ),& abc_t ( \"N2\" , - 9.67578d0 , 4.72162d0 , 1 1.70585d0 ),& abc_t ( \"O2\" , - 9.44833d0 , 4.43822d0 , 1 1.42005d0 ),& abc_t ( \"CO\" , - 1 0.52862d0 , 5.13259d0 , 1 2.01421d0 ),& abc_t ( \"CO2\" , - 8.55445d0 , 4.01195d0 , 9.52345d0 ),& abc_t ( \"H2S\" , - 4.51499d0 , 5.23538d0 , 4.42126d0 ),& abc_t ( \"CH4\" , - 1 0.44708d0 , 4.66491d0 , 1 2.12986d0 ),& abc_t ( \"C2H6\" , - 1 9.67563d0 , 4.51222d0 , 2 0.62567d0 ),& abc_t ( \"SF6\" , - 1 6.56118d0 , 2.15289d0 , 2 0.35440d0 )] !! ABC constants for heavywater type ( abc_t ), dimension ( ngas_D2O ), parameter :: abc_D2O = & [ abc_t ( \"He\" , - 0.72643d0 , 7.02134d0 , 2.04433d0 ),& abc_t ( \"Ne\" , - 0.91999d0 , 5.65327d0 , 3.17247d0 ),& abc_t ( \"Ar\" , - 7.17725d0 , 4.48177d0 , 9.31509d0 ),& abc_t ( \"Kr\" , - 8.47059d0 , 3.91580d0 , 1 0.69433d0 ),& abc_t ( \"Xe\" , - 1 4.46485d0 , 4.42330d0 , 1 5.60919d0 ),& abc_t ( \"D2\" , - 5.33843d0 , 6.15723d0 , 6.53046d0 ),& abc_t ( \"CH4\" , - 1 0.01915d0 , 4.73368d0 , 1 1.75711d0 )] !! ci and di coefficients for water real ( real64 ), dimension ( 6 , 2 ), parameter :: cidi_H2O = reshape ([& 1.99274064d0 , 1.09965342d0 , - 0.510839303d0 , - 1.75493479d0 , - 4 5.5170352d0 , - 6.7469445d5 ,& 1.0d0 / 3.0d0 , 2.0d0 / 3.0d0 , 5.0d0 / 3.0d0 , 1 6.0d0 / 3.0d0 , 4 3.0d0 / 3.0d0 , 11 0.0d0 / 3.0d0 ], [ 6 , 2 ]) !! ci and di coefficients for heavywater real ( real64 ), dimension ( 4 , 2 ), parameter :: cidi_D2O = reshape ([& 2.7072d0 , 0.58662d0 , - 1.3069d0 , - 4 5.663d0 , & 0.374d0 , 1.45d0 , 2.6d0 , 1 2.3d0 ], [ 4 , 2 ]) !! EFGH constants for water type ( efgh_t ), dimension ( ngas_H2O ), parameter :: efgh_H2O = & [ efgh_t ( \"He\" , 226 7.4082d0 , - 2.9616d0 , - 3.2604d0 , 7.8819d0 ),& efgh_t ( \"Ne\" , 250 7.3022d0 , - 3 8.6955d0 , 11 0.3992d0 , - 7 1.9096d0 ),& efgh_t ( \"Ar\" , 231 0.5463d0 , - 4 6.7034d0 , 16 0.4066d0 , - 11 8.3043d0 ),& efgh_t ( \"Kr\" , 227 6.9722d0 , - 6 1.1494d0 , 21 4.0117d0 , - 15 9.0407d0 ),& efgh_t ( \"Xe\" , 202 2.8375d0 , 1 6.7913d0 , - 6 1.2401d0 , 4 1.9236d0 ),& efgh_t ( \"H2\" , 228 6.4159d0 , 1 1.3397d0 , - 7 0.7279d0 , 6 3.0631d0 ),& efgh_t ( \"N2\" , 238 8.8777d0 , - 1 4.9593d0 , 4 2.0179d0 , - 2 9.4396d0 ),& efgh_t ( \"O2\" , 230 5.0674d0 , - 1 1.3240d0 , 2 5.3224d0 , - 1 5.6449d0 ),& efgh_t ( \"CO\" , 234 6.2291d0 , - 5 7.6317d0 , 20 4.5324d0 , - 15 2.6377d0 ),& efgh_t ( \"CO2\" , 167 2.9376d0 , 2 8.1751d0 , - 11 2.4619d0 , 8 5.3807d0 ),& efgh_t ( \"H2S\" , 131 9.1205d0 , 1 4.1571d0 , - 4 6.8361d0 , 3 3.2266d0 ),& efgh_t ( \"CH4\" , 221 5.6977d0 , - 0.1089d0 , - 6.6240d0 , 4.6789d0 ),& efgh_t ( \"C2H6\" , 214 3.8121d0 , 6.8859d0 , - 1 2.6084d0 , 0.0d0 ),& efgh_t ( \"SF6\" , 287 1.7265d0 , - 6 6.7556d0 , 22 9.7191d0 , - 17 2.7400d0 )] !! EFGH constants for heavywater type ( efgh_t ), dimension ( ngas_D2O ), parameter :: efgh_D2O = & [ efgh_t ( \"He\" , 229 3.2474d0 , - 5 4.7707d0 , 19 4.2924d0 , - 14 2.1257 ), & efgh_t ( \"Ne\" , 243 9.6677d0 , - 9 3.4934d0 , 33 0.7783d0 , - 24 3.0100d0 ),& efgh_t ( \"Ar\" , 226 9.2352d0 , - 5 3.6321d0 , 19 1.8421d0 , - 14 3.7659d0 ),& efgh_t ( \"Kr\" , 225 0.3857d0 , - 4 2.0835d0 , 14 0.7656d0 , - 10 2.7592d0 ),& efgh_t ( \"Xe\" , 203 8.3656d0 , 6 8.1228d0 , - 27 1.3390d0 , 20 7.7984d0 ),& efgh_t ( \"D2\" , 214 1.3214d0 , - 1.9696d0 , 1.6136d0 , 0.0d0 ),& efgh_t ( \"CH4\" , 221 6.0181d0 , - 4 0.7666d0 , 15 2.5778d0 , - 11 7.7430d0 )] public :: iapws_g704_gas_t public :: iapws_g704_kh , iapws_g704_kd public :: iapws_g704_ngases public :: iapws_g704_gases , iapws_g704_gases2 contains pure function findgas_abc ( gas , abc ) result ( value ) !! Find the index of the gas in the ABC table. implicit none character ( len =* ), intent ( in ) :: gas !! Gas. type ( abc_t ), dimension (:), intent ( in ) :: abc !! ABC table. integer ( int32 ) :: value !! index of the gas. !! local variables integer ( int32 ) :: i value = 0 do i = 1 , size ( abc ) if ( trim ( gas ) . eq . abc ( i )% gas ) then value = i exit endif end do end function pure function findgas_efgh ( gas , efgh ) result ( value ) !! Find the index of the gas in the ABC table. implicit none character ( len =* ), intent ( in ) :: gas !! Gas. type ( efgh_t ), dimension (:), intent ( in ) :: efgh !! EFGH table. integer ( int32 ) :: value !! index of gas. integer ( int32 ) :: i value = 0 do i = 1 , size ( efgh ) if ( trim ( gas ) . eq . efgh ( i )% gas ) then value = i exit endif end do end function pure elemental function f_p1star_H2O ( T ) result ( value ) !! Compute p1* in H2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: value !! p1* in MPa. real ( real64 ) :: Tr real ( real64 ) :: tau Tr = ( T + T_KELVIN ) / Tc1_H2O tau = 1 - Tr value = exp ( 1 / ( Tr ) * sum ( aibi_H2O (:, 1 ) * tau ** ( aibi_H2O (:, 2 )))) * pc1_H2O end function pure elemental function f_p1star_D2O ( T ) result ( value ) !! Compute p1* in D2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: value !! p1* in MPa. real ( real64 ) :: Tr real ( real64 ) :: tau Tr = ( T + T_KELVIN ) / Tc1_D2O tau = 1 - Tr value = exp ( 1 / ( Tr ) * sum ( aibi_D2O (:, 1 ) * tau ** ( aibi_D2O (:, 2 )))) * pc1_D2O end function pure elemental function f_kh_p1star_H2O ( T , abc ) result ( value ) !! Compute kh/p1* in H2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. type ( abc_t ), intent ( in ) :: abc !! ABC coefficients. real ( real64 ) :: value !! kH/p1* adimensional. real ( real64 ) :: Tr real ( real64 ) :: tau Tr = ( T + T_KELVIN ) / Tc1_H2O tau = 1 - Tr value = exp ( abc % A / Tr + abc % B * ( tau ** 0.355d0 ) / Tr + abc % C * exp ( tau ) * Tr ** ( - 0.41d0 )) end function pure elemental function f_kh_p1star_D2O ( T , abc ) result ( value ) !! Compute kh/p1* in D2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. type ( abc_t ), intent ( in ) :: abc !! ABC coefficients. real ( real64 ) :: value !! kh/p1* adimensional. real ( real64 ) :: Tr real ( real64 ) :: tau Tr = ( T + T_KELVIN ) / Tc1_D2O tau = 1 - Tr value = exp ( abc % A / Tr + abc % B * ( tau ** 0.355d0 ) / Tr + abc % C * exp ( tau ) * Tr ** ( - 0.41d0 )) end function pure elemental function ft_H2O ( tau ) result ( value ) !! Compute f(t) for H2O. implicit none real ( real64 ), intent ( in ) :: tau !! tau = 1-T/Tr. real ( real64 ) :: value !! f(t) is adimensional. value = sum ( cidi_H2O (:, 1 ) * tau ** ( cidi_H2O (:, 2 ))) end function pure elemental function ft_D2O ( tau ) result ( value ) !! Compute f(t) for D2O. implicit none real ( real64 ), intent ( in ) :: tau !! tau = 1-T/Tr. real ( real64 ) :: value !! f(t) is adimensional. value = sum ( cidi_D2O (:, 1 ) * tau ** ( cidi_D2O (:, 2 ))) end function pure elemental function f_kh_H2O ( T , abc ) result ( value ) !! Compute kH in H2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. type ( abc_t ), intent ( in ) :: abc !! ABC coefficients. real ( real64 ) :: value !! kH in MPa. value = f_kh_p1star_H2O ( T , abc ) * f_p1star_H2O ( T ) end function pure elemental function f_kh_D2O ( T , abc ) result ( value ) !! Compute kH in D2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. type ( abc_t ), intent ( in ) :: abc !! ABC coefficients. real ( real64 ) :: value !! kH in MPa. value = f_kh_p1star_D2O ( T , abc ) * f_p1star_D2O ( T ) end function pure elemental function f_kd_H2O ( T , efgh ) result ( value ) !! Compute kd in H2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. type ( efgh_t ), intent ( in ) :: efgh !! EFGH coefficients. real ( real64 ) :: value !! kD adimensional. real ( real64 ) :: Tr real ( real64 ) :: tau real ( real64 ) :: p1 real ( real64 ) :: p2 real ( real64 ) :: p3 real ( real64 ) :: p4 Tr = ( T + T_KELVIN ) / Tc1_H2O tau = 1 - Tr p1 = q_H2O * efgh % F p2 = efgh % E / ( T + T_KELVIN ) * ft_H2O ( tau ) p3 = ( efgh % F + efgh % G * tau ** ( 2.0d0 / 3.0d0 ) + efgh % H * tau ) p4 = exp ( - T / 10 0.0d0 ) value = exp ( p1 + p2 + p3 * p4 ) end function pure elemental function f_kd_D2O ( T , efgh ) result ( value ) !! Compute kd in D2O. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. type ( efgh_t ), intent ( in ) :: efgh !! EFGH coefficients. real ( real64 ) :: value !! kD adimensional. real ( real64 ) :: Tr real ( real64 ) :: tau real ( real64 ) :: p1 real ( real64 ) :: p2 real ( real64 ) :: p3 real ( real64 ) :: p4 Tr = ( T + T_KELVIN ) / Tc1_D2O tau = 1 - Tr p1 = q_D2O * efgh % F p2 = efgh % E / ( T + T_KELVIN ) * ft_D2O ( tau ) p3 = ( efgh % F + efgh % G * tau ** ( 2.0d0 / 3.0d0 ) + efgh % H * tau ) p4 = exp ( - T / 10 0.0d0 ) value = exp ( p1 + p2 + p3 * p4 ) end function pure subroutine iapws_g704_kh ( T , gas , heavywater , k ) !! Compute the henry constant for a given temperature. implicit none ! arguments real ( real64 ), intent ( in ) :: T (:) !! Temperature in °C. character ( len =* ), intent ( in ) :: gas !! Gas. integer ( int32 ), intent ( in ) :: heavywater !! Flag if D2O (1) is used or H2O(0). real ( real64 ), intent ( out ) :: k (:) !! Henry constant. Filled with NaNs if gas not found. ! variables integer ( int32 ) :: i if ( heavywater > 0 ) then i = findgas_abc ( gas , abc_D2O ) if ( i == 0 ) then k = ieee_value ( 1.0d0 , ieee_quiet_nan ) else k = f_kh_D2O ( T , abc_D2O ( i )) endif else i = findgas_abc ( gas , abc_H2O ) if ( i == 0 ) then k = ieee_value ( 1.0d0 , ieee_quiet_nan ) else k = f_kh_H2O ( T , abc_H2O ( i )) endif endif end subroutine pure subroutine iapws_g704_kd ( T , gas , heavywater , k ) !! Compute the vapor-liquid constant for a given temperature. implicit none ! arguments real ( real64 ), intent ( in ) :: T (:) !! Temperature in °C. character ( len =* ), intent ( in ) :: gas !! Gas. integer ( int32 ), intent ( in ) :: heavywater !! Flag if D2O (1) is used or H2O(0). real ( real64 ), intent ( out ) :: k (:) !! Vapor-liquid constant. Filled with NaNs if gas not found. ! variables integer ( int32 ) :: i if ( heavywater > 0 ) then i = findgas_efgh ( gas , efgh_D2O ) if ( i == 0 ) then k = ieee_value ( 1.0d0 , ieee_quiet_nan ) else k = f_kd_D2O ( T , efgh_D2O ( i )) endif else i = findgas_efgh ( gas , efgh_H2O ) if ( i == 0 ) then k = ieee_value ( 1.0d0 , ieee_quiet_nan ) else k = f_kd_H2O ( T , efgh_H2O ( i )) endif endif end subroutine pure function iapws_g704_ngases ( heavywater ) result ( n ) !! Returns the number of gases. implicit none ! arguments integer ( int32 ), intent ( in ) :: heavywater !! Flag if D2O (1) is used or H2O(0). integer ( int32 ) :: n !! Number of gases. if ( heavywater > 0 ) then n = ngas_D2O else n = ngas_H2O endif end function function iapws_g704_gases ( heavywater ) result ( gases ) !! Returns the list of available gases. implicit none ! arguments integer ( int32 ), intent ( in ) :: heavywater !! Flag if D2O (1) is used or H2O(0). type ( iapws_g704_gas_t ), pointer :: gases (:) !! Available gases. ! variables integer ( int32 ) :: i , n if ( allocated ( f_gases )) then deallocate ( f_gases ) endif if ( heavywater > 0 ) then allocate ( f_gases ( ngas_D2O )) do i = 1 , ngas_D2O if ( allocated ( f_gases ( i )% gas )) then deallocate ( f_gases ( i )% gas ) endif n = len ( trim ( abc_D2O ( i )% gas )) allocate ( character ( len = n ) :: f_gases ( i )% gas ) f_gases ( i )% gas = trim ( abc_D2O ( i )% gas ) enddo else allocate ( f_gases ( ngas_H2O )) do i = 1 , ngas_H2O if ( allocated ( f_gases ( i )% gas )) then deallocate ( f_gases ( i )% gas ) endif n = len ( trim ( abc_H2O ( i )% gas )) allocate ( character ( len = n ) :: f_gases ( i )% gas ) f_gases ( i )% gas = trim ( abc_H2O ( i )% gas ) enddo endif gases => f_gases end function function iapws_g704_gases2 ( heavywater ) result ( gases ) !! Returns the available gases as a string. implicit none ! arguments integer ( int32 ), intent ( in ) :: heavywater !! Flag if D2O (1) is used or H2O(0). character ( len = :), pointer :: gases !! Available gases ! variables integer ( int32 ) :: i , j , k , ngas type ( iapws_g704_gas_t ), pointer :: f_gases_list (:) f_gases_list => iapws_g704_gases ( heavywater ) ngas = size ( f_gases_list ) k = 0 do i = 1 , ngas k = k + len ( f_gases_list ( i )% gas ) enddo if ( allocated ( f_gases_str )) then deallocate ( f_gases_str ) endif allocate ( character ( len = k + ngas ) :: f_gases_str ) i = 1 j = 1 k = 1 do i = 1 , ngas do j = 1 , len ( f_gases_list ( i )% gas ) f_gases_str ( k : k ) = f_gases_list ( i )% gas ( j : j ) k = k + 1 enddo f_gases_str ( k : k ) = \",\" k = k + 1 enddo f_gases_str ( len ( f_gases_str ): len ( f_gases_str )) = \"\" gases => f_gases_str end function end module","tags":"","loc":"sourcefile\\iapws_g704.f90.html"},{"title":"iapws_g704_capi.f90 – iapws","text":"This file depends on sourcefile~~iapws_g704_capi.f90~~EfferentGraph sourcefile~iapws_g704_capi.f90 iapws_g704_capi.f90 sourcefile~iapws_g704.f90 iapws_g704.f90 sourcefile~iapws_g704_capi.f90->sourcefile~iapws_g704.f90 sourcefile~iapws_r283.f90 iapws_r283.f90 sourcefile~iapws_g704.f90->sourcefile~iapws_r283.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~iapws_g704_capi.f90~~AfferentGraph sourcefile~iapws_g704_capi.f90 iapws_g704_capi.f90 sourcefile~iapws.f90 iapws.f90 sourcefile~iapws.f90->sourcefile~iapws_g704_capi.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module iapws__g704_capi !! C API for the G704 module. use iso_fortran_env use iso_c_binding use iapws__g704 implicit none private type , bind ( C ) :: c_char_p type ( c_ptr ) :: p end type type :: capi_gas_t character ( kind = c_char , len = 1 ), allocatable :: gas (:) end type type ( capi_gas_t ), allocatable , target :: c_gases (:) type ( c_char_p ), allocatable , target :: char_pp (:) character ( len = :), allocatable , target :: c_gases_str public :: iapws_g704_capi_kh , iapws_g704_capi_kd public :: iapws_g704_capi_ngases public :: iapws_g704_capi_gases contains subroutine iapws_g704_capi_kh ( T , gas , heavywater , k , size_gas , size_T ) bind ( C ) !! Compute the henry constant for a given temperature. implicit none ! arguments integer ( c_int ), intent ( in ), value :: size_gas !! Size of the gas string. integer ( c_size_t ), intent ( in ), value :: size_T !! Size of T and k. real ( c_double ), intent ( in ) :: T ( size_T ) !! Temperature in °C. type ( c_ptr ), intent ( in ), value :: gas !! Gas. integer ( c_int ), intent ( in ), value :: heavywater !! Flag if D2O (1) is used or H2O(0). real ( c_double ), intent ( inout ) :: k ( size_T ) !! Henry constant. Filled with NaNs if gas not found. ! variables character , pointer , dimension (:) :: c2f_gas character ( len = size_gas ) :: f_gas integer ( int32 ) :: i call c_f_pointer ( gas , c2f_gas , shape = [ size_gas ]) do i = 1 , size_gas f_gas ( i : i ) = c2f_gas ( i ) enddo call iapws_g704_kh ( T , f_gas , heavywater , k ) end subroutine subroutine iapws_g704_capi_kd ( T , gas , heavywater , k , size_gas , size_T ) bind ( C ) !! Compute the vapor-liquid constant for a given temperature. implicit none ! arguments integer ( c_size_t ), intent ( in ), value :: size_T !! Size of T and k. integer ( c_int ), intent ( in ), value :: size_gas !! Size of the gas string. real ( c_double ), intent ( in ) :: T ( size_T ) !! Temperature in °C. type ( c_ptr ), intent ( in ), value :: gas !! Gas. integer ( c_int ), intent ( in ), value :: heavywater !! Flag if D2O (1) is used or H2O(0). real ( c_double ), intent ( inout ) :: k ( size_T ) !! Vapor-liquid constant. Filled with NaNs if gas not found. ! variables character , pointer , dimension (:) :: c2f_gas character ( len = size_gas ) :: f_gas integer ( int32 ) :: i call c_f_pointer ( gas , c2f_gas , shape = [ size_gas ]) do i = 1 , size_gas f_gas ( i : i ) = c2f_gas ( i ) enddo call iapws_g704_kd ( T , f_gas , heavywater , k ) end subroutine pure function iapws_g704_capi_ngases ( heavywater ) bind ( C ) result ( n ) !! Returns the number of gases. implicit none ! arguments integer ( c_int ), intent ( in ), value :: heavywater !! Flag if D2O (1) is used or H2O(0). integer ( c_int ) :: n !! Number of gases. n = iapws_g704_ngases ( heavywater ) end function function iapws_g704_capi_gases ( heavywater ) bind ( C ) result ( gases ) !! Returns the list of available gases. implicit none ! arguments integer ( c_int ), intent ( in ), value :: heavywater !! Flag if D2O (1) is used or H2O(0). type ( c_ptr ) :: gases !! Available gases. ! variables integer ( int32 ) :: i , j , ngas , n type ( iapws_g704_gas_t ), pointer :: f_gases (:) => null () f_gases => iapws_g704_gases ( heavywater ) ngas = size ( f_gases ) if ( allocated ( c_gases )) then deallocate ( c_gases ) endif allocate ( c_gases ( ngas )) if ( allocated ( char_pp )) then deallocate ( char_pp ) endif allocate ( char_pp ( ngas )) do i = 1 , ngas if ( allocated ( c_gases ( i )% gas )) then deallocate ( c_gases ( i )% gas ) endif n = len ( f_gases ( i )% gas ) allocate ( c_gases ( i )% gas ( n + 1 )) do j = 1 , n c_gases ( i )% gas ( j ) = f_gases ( i )% gas ( j : j ) enddo c_gases ( i )% gas ( n + 1 ) = c_null_char char_pp ( i )% p = c_loc ( c_gases ( i )% gas ) enddo gases = c_loc ( char_pp ) end function function iapws_g704_capi_gases2 ( heavywater ) bind ( C ) result ( gases ) !! Returns the available gases as a string. implicit none ! arguments integer ( c_int ), intent ( in ), value :: heavywater !! Flag if D2O (1) is used or H2O(0). type ( c_ptr ) :: gases !! Available gases. ! variables character ( len = :), pointer :: f_gases_str => null () f_gases_str => iapws_g704_gases2 ( heavywater ) if ( allocated ( c_gases_str )) then deallocate ( c_gases_str ) endif allocate ( character ( len = len ( f_gases_str )) :: c_gases_str ) c_gases_str = f_gases_str c_gases_str ( len ( f_gases_str ): len ( f_gases_str )) = c_null_char gases = c_loc ( c_gases_str ) end function end module","tags":"","loc":"sourcefile\\iapws_g704_capi.f90.html"},{"title":"iapws_version.f90 – iapws","text":"Files dependent on this one sourcefile~~iapws_version.f90~~AfferentGraph sourcefile~iapws_version.f90 iapws_version.f90 sourcefile~iapws.f90 iapws.f90 sourcefile~iapws.f90->sourcefile~iapws_version.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module iapws__version !! Version use iso_fortran_env use iso_c_binding implicit none private character ( len =* ), parameter :: version = \"0.3.0\" character ( len = :), allocatable , target :: version_f character ( len = :), allocatable , target :: version_c public :: get_version contains function get_version () result ( fptr ) !! Get the version. implicit none !! Returns character ( len = :), pointer :: fptr !! Pointer to the version string. if ( allocated ( version_f )) then deallocate ( version_f ) endif allocate ( character ( len = len ( version )) :: version_f ) version_f = version fptr => version_f end function function capi_get_version () bind ( c , name = \"iapws_get_version\" ) result ( cptr ) !! Get the version. implicit none ! Returns type ( c_ptr ) :: cptr !! Pointer to version string. character ( len = :), pointer :: fptr fptr => get_version () if ( allocated ( version_c )) then deallocate ( version_c ) endif allocate ( character ( len = len ( fptr ) + 1 ) :: version_c ) version_c = fptr // c_null_char cptr = c_loc ( version_c ) end function end module iapws__version","tags":"","loc":"sourcefile\\iapws_version.f90.html"},{"title":"iapws.f90 – iapws","text":"This file depends on sourcefile~~iapws.f90~~EfferentGraph sourcefile~iapws.f90 iapws.f90 sourcefile~iapws_g704.f90 iapws_g704.f90 sourcefile~iapws.f90->sourcefile~iapws_g704.f90 sourcefile~iapws_g704_capi.f90 iapws_g704_capi.f90 sourcefile~iapws.f90->sourcefile~iapws_g704_capi.f90 sourcefile~iapws_r283.f90 iapws_r283.f90 sourcefile~iapws.f90->sourcefile~iapws_r283.f90 sourcefile~iapws_version.f90 iapws_version.f90 sourcefile~iapws.f90->sourcefile~iapws_version.f90 sourcefile~iapws_g704.f90->sourcefile~iapws_r283.f90 sourcefile~iapws_g704_capi.f90->sourcefile~iapws_g704.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module iapws !! Main module for the IAPWS library. use iapws__version use iapws__g704 use iapws__g704_capi use iapws__r283 end module","tags":"","loc":"sourcefile\\iapws.f90.html"},{"title":"iapws_r283.f90 – iapws","text":"Files dependent on this one sourcefile~~iapws_r283.f90~~AfferentGraph sourcefile~iapws_r283.f90 iapws_r283.f90 sourcefile~iapws.f90 iapws.f90 sourcefile~iapws.f90->sourcefile~iapws_r283.f90 sourcefile~iapws_g704.f90 iapws_g704.f90 sourcefile~iapws.f90->sourcefile~iapws_g704.f90 sourcefile~iapws_g704_capi.f90 iapws_g704_capi.f90 sourcefile~iapws.f90->sourcefile~iapws_g704_capi.f90 sourcefile~iapws_g704.f90->sourcefile~iapws_r283.f90 sourcefile~iapws_g704_capi.f90->sourcefile~iapws_g704.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module iapws__r283 !! Module for IAPWS R283 use iso_fortran_env use iso_c_binding implicit none private real ( real64 ), parameter :: Tc_H2O = 64 7.096d0 !! Critical temperature for H2O in K real ( real64 ), parameter :: Tc_D2O = 64 3.847d0 !! Critical temperature for D2O in K real ( real64 ), parameter :: pc_H2O = 2 2.064d0 !! Critical pressure for H2O in MPa real ( real64 ), parameter :: pc_D2O = 2 1.671d0 !! Critical pressure for H2O in MPa real ( real64 ), parameter :: rhoc_H2O = 32 2.0d0 !! Critical density for H2O in kg.m-3 real ( real64 ), parameter :: rhoc_D2O = 35 6.0d0 !! Critical density for H2O in kg.m-3 real ( c_double ), protected , bind ( C , name = \"iapws_Tc_H2O\" ) & :: capi_Tc_H2O = Tc_H2O !! Critical temperature for H2O in K real ( c_double ), protected , bind ( C , name = \"iapws_Tc_D2O\" ) & :: capi_Tc_D2O = Tc_D2O !! Critical temperature for D2O in K real ( c_double ), protected , bind ( C , name = \"iapws_pc_H2O\" ) & :: capi_pc_H2O = pc_H2O !! Critical pressure for H2O in MPa real ( c_double ), protected , bind ( C , name = \"iapws_pc_D2O\" ) & :: capi_pc_D2O = pc_D2O !! Critical pressure for D2O in MPa real ( c_double ), protected , bind ( C , name = \"iapws_rhoc_H2O\" ) & :: capi_rhoc_H2O = rhoc_H2O !! Critical density for H2O in kg.m-3 real ( c_double ), protected , bind ( C , name = \"iapws_rhoc_D2O\" ) & :: capi_rhoc_D2O = rhoc_D2O !! Critical density for D2O in kg.m-3 public :: Tc_H2O , Tc_D2O , pc_H2O , pc_D2O , rhoc_H2O , rhoc_D2O public :: capi_Tc_H2O , capi_Tc_D2O , capi_pc_H2O , capi_pc_D2O , capi_rhoc_H2O , capi_rhoc_D2O end module","tags":"","loc":"sourcefile\\iapws_r283.f90.html"},{"title":"iapws_r797.f90 – iapws","text":"Source Code module iapws__r797 !! Module for IAPWS R7-97 use iso_fortran_env use ieee_arithmetic implicit none private public :: iapws_r797_v !! Parameters from IAPWS R7-97 real ( real64 ), parameter :: T_KELVIN = 27 3.15d0 !! critical temperature of water in K real ( real64 ), parameter :: Tc = 64 7.096d0 !! critical pressure of the water in MPa real ( real64 ), parameter :: pc = 2 2.064d0 !! critical density of the water in kg.m-3. real ( real64 ), parameter :: rhoc = 32 2.0d0 !! Specific gas constant 0.461 526 kJ.kg-1.K-1 real ( real64 ), parameter :: R = 0.461526d0 real ( real64 ), parameter :: r1_ps = 1 6.53d0 real ( real64 ), parameter :: r1_ts = 138 6.0d0 !! IJn_r1f real ( real64 ) :: IJn_r1f ( 9 , 3 ) = transpose ( reshape ([& 0.0d0 , - 2.0d0 , 0.146d0 , & 0.0d0 , - 1.0d0 , - 0.84548187169114d0 , & 0.0d0 , 0.0d0 , - 0.37563672040d1 , & 0.0d0 , 1.0d0 , 0.33855169168385d1 , & 0.0d0 , 2.0d0 , - 0.95791963387872d0 ,& 0.0d0 , 3.0d0 , 0.15772038513228d0 , & 0.0d0 , 4.0d0 , - 0.16616417199501d-1 , & 0.0d0 , 5.0d0 , - 0.81214629983568d-3 , & 1.0d0 , - 9.0d0 , - 0.28319080123804d-3 ], & [ 3 , 9 ])) contains pure elemental function gamma_ ( P , T ) result ( res ) implicit none real ( real64 ), intent ( in ) :: P real ( real64 ), intent ( in ) :: T real ( real64 ) :: pi real ( real64 ) :: tau real ( real64 ) :: res pi = ( T + T_KELVIN ) / r1_ts tau = P / r1_ps res = sum ( IJn_r1f (:, 3 ) * ( 7.1d0 - pi ) ** IJn_r1f (:, 1 ) * ( tau - 1.222d0 ) ** IJn_r1f (:, 2 )) end function pure elemental function gamma_pi ( P , T ) result ( res ) implicit none real ( real64 ), intent ( in ) :: P real ( real64 ), intent ( in ) :: T real ( real64 ) :: pi real ( real64 ) :: tau real ( real64 ) :: res pi = ( T + T_KELVIN ) / r1_ts tau = P / r1_ps res = sum ( IJn_r1f (:, 3 ) * IJn_r1f (:, 1 ) * ( 7.1d0 - pi ) ** ( IJn_r1f (:, 1 ) - 1.0d0 ) * ( tau - 1.222d0 ) ** IJn_r1f (:, 2 )) end function pure elemental function iapws_r797_v ( P , T ) result ( res ) implicit none real ( real64 ), intent ( in ) :: P real ( real64 ), intent ( in ) :: T real ( real64 ) :: res res = R * ( T + T_KELVIN ) / P * gamma_pi ( P , T ) end function end module","tags":"","loc":"sourcefile\\iapws_r797.f90.html"},{"title":"Contributing and specs – iapws","text":"Water properties for Modern Fortran.","tags":"","loc":"page\\index.html"},{"title":"Changelog – iapws","text":"Version 0.3.0 API break: functions for the Fortran code were renamed: They do not contain the package+module in the name for the sake of simplicity The package is only added in the functions for the C API in order to have a namespace-like behavior. If needed for solving conflicts with other packages, the functions can be aliased. Remove separate sources files for the C API code for each module.\n  Each module now contains the code for the C API. Implement tests with the test-drive framework. Add version extension in the pywrapper. Implement version module with its getter. Documentation update. C API and Python wrapper moved to their own repositories. C wrapper Python wrapper Version 0.2.2 Implementation of report R283 for critical constants of water. Switch to pyproject.toml for python wrapper. Code refractoring and clean up. Documentation update. Full changelog available at github Version 0.2.1 Comlete missing documentation of private functions. Minor fixes in C API code as well in python wrapper. Remove unecessary dependency in Makefile. Full changelog available at github Version 0.2.0 New structure with modules corresponding to the IAPWS papers. Compatible with fpm. fpm module naming convention. API break for iapws_g704_kh and iapws_g704_kd functions: only 1d-arrays as inputs in Fortran and C API. only objects with buffer protocol as inputs in python wrapper. python wrappers return memoryviews. New functions: providing the number of gases in H2O and D2O. providing the available of gases in H2O and D2O as list of strings. providing the available of gases in H2O and D2O as a unique string. Cleanup old app code not needed anymore. Fix memory allocation in pywrapper. Completed tests. Documentation improvements: Add conversion equations from molar fractions to solubilities. Add plots for visualizing kh and kd. Full changelog available at github Version 0.1.1 Logo creation Error handling in python wrapper for arrays with rank greater than 1 Tests in python wrapper for expected failures with rank-n arrays Full changelog available at github Version 0.1.0 Implementation of kH and kD from IAPWS G7-04 in fortran + C API Python wrapper for kH and kD. Documentation with sphinx. Full changelog available at github","tags":"","loc":"page\\changelog.html"},{"title":"License – iapws","text":"Copyright (c) 2021-2024 Milan Skocic Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n“Software”), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions: The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tags":"","loc":"page\\license.html"},{"title":"References – iapws","text":"IAPWS, “Release on the Values of Temperature, Pressure and Density of Ordinary and Heavy Water Substances at Their Respective Critical Points,” IAPWS, St. Petersburg, Russia, R2-83, 1992. IAPWS, “Guideline on the Henry’s Constant and Vapor-Liquid Distribution Constant for Gases in H2O and D2O at High Temperatures,” IAPWS, Kyoto, Japan, G7-04, 2004. IAPWS, “Revised Release on the IAPWS Industrial Formulation 1997 for the Thermodynamic Properties of Water and Steam,” Lucerne, Switzerland, R7-97, 2007.","tags":"","loc":"page\\references.html"},{"title":"Specifications (specs) – iapws","text":"This is an index/directory of the specifications (specs) for each module. R2-83 - Values of Temperature, Pressure and Density of Ordinary and Heavy Water Substances at Their Respective Critical Points G7-04 - Guideline on the Henry’s Constant and Vapor-Liquid Distribution Constant for Gases in H2O and D2O at High Temperatures R7-97 - Revised Release on the IAPWS Industrial Formulation 1997 for the Thermodynamic Properties of Water and Steam","tags":"","loc":"page\\specs\\index.html"},{"title":"IAPWS R2-83 – iapws","text":"IAPWS R2-83 The technical report R2-83 defines constants used for computing the water properties. In water In heavywater","tags":"","loc":"page\\specs\\iapws_r283.html"}]}